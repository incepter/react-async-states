"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[796],{4993:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(2983);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,k=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5965:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=n(2206),r=(n(2983),n(4993));const s={sidebar_position:2,sidebar_label:"useData"},o="useData",i={unversionedId:"hooks/use-data",id:"hooks/use-data",title:"useData",description:"The useData hook",source:"@site/docs/hooks/2-use-data.md",sourceDirName:"hooks",slug:"/hooks/use-data",permalink:"/react-async-states/docs/hooks/use-data",draft:!1,editUrl:"https://github.com/incepter/react-async-states/edit/main/packages/docs/docs/hooks/2-use-data.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"useData"},sidebar:"tutorialSidebar",previous:{title:"useAsync",permalink:"/react-async-states/docs/hooks/use-async-state"},next:{title:"SSR",permalink:"/react-async-states/docs/server/ssr"}},l={},u=[{value:"The <code>useData</code> hook",id:"the-usedata-hook",level:2},{value:"Differences from <code>useAsync</code>",id:"differences-from-useasync",level:2},{value:"Example",id:"example",level:2},{value:"Async",id:"async",level:3},{value:"Counter",id:"counter",level:3}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usedata"},(0,r.kt)("inlineCode",{parentName:"h1"},"useData")),(0,r.kt)("h2",{id:"the-usedata-hook"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"useData")," hook"),(0,r.kt)("p",null,"This hook allows subscription and full control over a state, and represents\nthe API that you will be using with the most."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useData")," uses the same signature as ",(0,r.kt)("inlineCode",{parentName:"p"},"useAsync")," documented in ",(0,r.kt)("a",{parentName:"p",href:"/docs/hooks/use-async-state"},"its section.")),(0,r.kt)("p",{parentName:"admonition"},"This means that it accepts the same parameters and returns the same shape."),(0,r.kt)("p",{parentName:"admonition"},"Please refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/hooks/use-async-state"},(0,r.kt)("inlineCode",{parentName:"a"},"useAsync")," documentation."))),(0,r.kt)("p",null,"Its signature is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function useData<TData, TArgs, TError, TSelection = State<TData, TArgs, TError>>(\n  config: MixedConfig<TData, TArgs, TError, TSelection>,\n  deps: any[] = []\n): UseDataResult<TData, TArgs, TError> {\n  // [Not Native Code]\n}\n\n// used like this:\nconst result = useData(config, deps);\n")),(0,r.kt)("h2",{id:"differences-from-useasync"},"Differences from ",(0,r.kt)("inlineCode",{parentName:"h2"},"useAsync")),(0,r.kt)("p",null,"The major difference is that ",(0,r.kt)("inlineCode",{parentName:"p"},"useData")," will never return a ",(0,r.kt)("inlineCode",{parentName:"p"},"pending")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),"\nstates."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useData")," will suspend if the status is ",(0,r.kt)("inlineCode",{parentName:"li"},"pending")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useData")," will throw the error if status is ",(0,r.kt)("inlineCode",{parentName:"li"},"error"))),(0,r.kt)("p",null,"This means that ",(0,r.kt)("inlineCode",{parentName:"p"},"useData")," assumes you are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using a React ",(0,r.kt)("inlineCode",{parentName:"li"},"Error Boundary")," to display errors if applied."),(0,r.kt)("li",{parentName:"ul"},"Using ",(0,r.kt)("inlineCode",{parentName:"li"},"Suspense")," to display pending states (with or without ",(0,r.kt)("inlineCode",{parentName:"li"},"Transition"),")."),(0,r.kt)("li",{parentName:"ul"},"Or, you are working with a total synchronous state that's not supposed to error.")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"If you work with suspense, it is important to give a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," to your states."),(0,r.kt)("p",{parentName:"admonition"},"Because if the tree suspends, React will reset everything and will result\nin creating a new state everytime, and thus, an infinite loop.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("h3",{id:"async"},"Async"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'async function fetchUsers({ signal }: ProducerProps<User[]>) {\n  // artificially delayed by 500ms\n  await new Promise((res) => setTimeout(res, 1000));\n  return await API.get("/users", { signal }).then(({ data }) => data);\n}\n\nfunction Details() {\n  const { data, source } = useData({\n    lazy: false,\n    key: "user-details",\n    producer: fetchUsers,\n  });\n\n  return (\n    <div className="App">\n      <button onClick={() => source.run()}>\n        Fetch users\n      </button>\n      {data && (\n        <ul>\n          <summary>Users list:</summary>\n          {data.map((user: User) => (\n            <li key={user.id}>{user.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <Suspense fallback="Suspense fallback ... pending">\n      <Details />\n    </Suspense>\n  );\n}\n')),(0,r.kt)("h3",{id:"counter"},"Counter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export default function App() {\n  const {\n    data,\n    source: { setData },\n  } = useData({\n    initialValue: 0,\n  });\n\n  return (\n    <div>\n      <button onClick={() => setData((prev) => prev! - 1)}>Decrement</button>\n      <span>{data}</span>\n      <button onClick={() => setData((prev) => prev! + 1)}>Increment</button>\n    </div>\n  );\n}\n")))}d.isMDXComponent=!0}}]);