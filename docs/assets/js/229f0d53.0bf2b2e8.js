"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[994],{4993:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(2983);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5208:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(2206),r=(n(2983),n(4993));const i={sidebar_position:1,sidebar_label:"The producer"},o="The producer",l={unversionedId:"api/producer-function",id:"api/producer-function",title:"The producer",description:"What is a producer function?",source:"@site/docs/api/1-producer-function.md",sourceDirName:"api",slug:"/api/producer-function",permalink:"/react-async-states/docs/api/producer-function",draft:!1,editUrl:"https://github.com/incepter/react-async-states/edit/main/packages/docs/docs/api/1-producer-function.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"The producer"},sidebar:"tutorialSidebar",previous:{title:"State sharing",permalink:"/react-async-states/docs/tutorial/state-sharing"},next:{title:"Create source",permalink:"/react-async-states/docs/api/create-source"}},s={},p=[{value:"What is a producer function?",id:"what-is-a-producer-function",level:2},{value:"The producer props",id:"the-producer-props",level:2},{value:"<code>args</code>",id:"args",level:3},{value:"Type and description",id:"type-and-description",level:4},{value:"Usage examples",id:"usage-examples",level:4},{value:"<code>signal</code>",id:"signal",level:3},{value:"Type and description",id:"type-and-description-1",level:4},{value:"Usage examples",id:"usage-examples-1",level:4},{value:"<code>lastSuccess</code>",id:"lastsuccess",level:3},{value:"Type and description",id:"type-and-description-2",level:4},{value:"Usage examples",id:"usage-examples-2",level:4},{value:"<code>isAborted</code>",id:"isaborted",level:3},{value:"Type and description",id:"type-and-description-3",level:4},{value:"Usage examples",id:"usage-examples-3",level:4},{value:"<code>abort</code>",id:"abort",level:3},{value:"Type and description",id:"type-and-description-4",level:4},{value:"Usage examples",id:"usage-examples-4",level:4},{value:"<code>onAbort</code>",id:"onabort",level:3},{value:"Type and description",id:"type-and-description-5",level:4},{value:"Usage examples",id:"usage-examples-5",level:4},{value:"<code>emit</code>",id:"emit",level:3},{value:"Type and description",id:"type-and-description-6",level:4},{value:"Usage examples",id:"usage-examples-6",level:4},{value:"<code>getState</code>",id:"getstate",level:3},{value:"Type and description",id:"type-and-description-7",level:4}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-producer"},"The producer"),(0,r.kt)("h2",{id:"what-is-a-producer-function"},"What is a producer function?"),(0,r.kt)("p",null,"The producer function is the function that returns the state's value,\nhere is its declaration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export type Producer<TData, TArgs extends unknown[] = [], TError = Error> = (\n    props: ProducerProps<TData, TArgs, TError>\n) => TData | Promise<TData>\n")),(0,r.kt)("p",null,"It may be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Any synchronous function returning a value"),(0,r.kt)("li",{parentName:"ul"},"Any async function: using the ",(0,r.kt)("inlineCode",{parentName:"li"},"async/await")," syntax, or returning a ",(0,r.kt)("inlineCode",{parentName:"li"},"promise")),(0,r.kt)("li",{parentName:"ul"},"Not defined. Yes, you can have no producer at all. In this case, you will be\nusing ",(0,r.kt)("inlineCode",{parentName:"li"},"setState")," to set the state directly and immediately.")),(0,r.kt)("p",null,"The main goal and purpose is to ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," your function,\nso it will receive a single object argument with the following properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"args")),(0,r.kt)("td",{parentName:"tr",align:null},"The arguments passed to ",(0,r.kt)("inlineCode",{parentName:"td"},"run"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"runp")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"runc"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"signal")),(0,r.kt)("td",{parentName:"tr",align:null},"An abort signal to be used for cancellations with common APIs such as fetch and axios")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"payload")),(0,r.kt)("td",{parentName:"tr",align:null},"A copy of the internal payload held by this state instance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lastSuccess")),(0,r.kt)("td",{parentName:"tr",align:null},"The last succeeded state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"isAborted")),(0,r.kt)("td",{parentName:"tr",align:null},"A function returns a boolean indicating whether the current run has been cancelled (by dependency change, unmount or user action)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abort")),(0,r.kt)("td",{parentName:"tr",align:null},"Abort the current run, if the run did not return a promise yet, no changes will be applied to the state")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onAbort")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows to register an abort callback that will be called on cleanup, or when another run occurs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emit")),(0,r.kt)("td",{parentName:"tr",align:null},"set the state from the producer after it resolves, this to support intervals and incoming events from an external system (like websockets, sse...)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"getState")),(0,r.kt)("td",{parentName:"tr",align:null},"gets the current state. May be useful with emit")))),(0,r.kt)("p",null,"Your function will be notified with the cancellation by registering an ",(0,r.kt)("inlineCode",{parentName:"p"},"onAbort"),"\ncallback, you can exploit to clear a timeout or interval for example."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"isAborted")," function that returns a boolean that is truthy if\nthis current run is aborted, you may want to use it before calling a callback\nreceived from payload or args."),(0,r.kt)("p",null,"The following functions are all supported by the library:"),(0,r.kt)("p",null,"You can even omit the producer function, if you attempt to run it,\nit will simply call ",(0,r.kt)("inlineCode",{parentName:"p"},"setState")," and imperatively change the current state with\neither the value or the updater that it received."),(0,r.kt)("h2",{id:"the-producer-props"},"The producer props"),(0,r.kt)("p",null,"Please keep in ming the producer type declaration and the generics that it has:"),(0,r.kt)("p",null,"-",(0,r.kt)("inlineCode",{parentName:"p"},"TData"),": Refers to the type of the data when ",(0,r.kt)("inlineCode",{parentName:"p"},"success")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TArgs"),": Refers to the type of the ",(0,r.kt)("inlineCode",{parentName:"li"},"args")," that we will use to run the function"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TError"),": Refers to the type of the Error when ",(0,r.kt)("inlineCode",{parentName:"li"},"error"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export type Producer<TData, TArgs extends unknown[] = [], TError = Error> = (\n    props: ProducerProps<TData, TArgs, TError>\n) => TData\n")),(0,r.kt)("h3",{id:"args"},(0,r.kt)("inlineCode",{parentName:"h3"},"args")),(0,r.kt)("h4",{id:"type-and-description"},"Type and description"),(0,r.kt)("p",null,"These are the arguments that the ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," functions receives, of type: ",(0,r.kt)("inlineCode",{parentName:"p"},"TArgs"),"\nwhich is a subset of an array."),(0,r.kt)("h4",{id:"usage-examples"},"Usage examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// a counter example\nfunction counter(props: ProducerProps<number, ["increment" | "decrement", number]>) {\n  const [action, by] = args;\n  if (action === "increment") {\n    ...\n  } else if (action === "decrement") {\n    \n  }\n}\n\nfunction searchUsers(\n  { args: [query] }: ProducerProps<Page<User>, [string], Error>\n) {\n  return fetchUsersList(`${url}?${query}`);\n}\n')),(0,r.kt)("h3",{id:"signal"},(0,r.kt)("inlineCode",{parentName:"h3"},"signal")),(0,r.kt)("h4",{id:"type-and-description-1"},"Type and description"),(0,r.kt)("p",null,"This is ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal"},"an ",(0,r.kt)("inlineCode",{parentName:"a"},"AbortSignal"))),(0,r.kt)("h4",{id:"usage-examples-1"},"Usage examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function searchUsers(\n  { args: [query] }: ProducerProps<Page<User>, [string], Error>\n) {\n  return fetchUsersList(`${url}?${query}`);\n}\n\nasync function getUserDetails(\n  { args: [userId], signal }: ProducerProps<User, [string], Error>\n) {\n  return API.get(`/users/${userId}`, { signal });\n}\n")),(0,r.kt)("h3",{id:"lastsuccess"},(0,r.kt)("inlineCode",{parentName:"h3"},"lastSuccess")),(0,r.kt)("h4",{id:"type-and-description-2"},"Type and description"),(0,r.kt)("p",null,"This is either an ",(0,r.kt)("inlineCode",{parentName:"p"},"InitialState")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"SuccessState"),"."),(0,r.kt)("p",null,"When ran for the first time, this will hold the initial state with the given\n",(0,r.kt)("inlineCode",{parentName:"p"},"initialValue")," when defining your state, or else, it will always be the latest\nsuccess state."),(0,r.kt)("h4",{id:"usage-examples-2"},"Usage examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"async function infiniteProductsPageExample(\n  { lastSuccess, args: [page, query] }: ProducerProps<Page<Product>, [number, string]\n) {\n  let previousPage = lastSuccess.props?.args[0] ?? 0;\n  let nextPage = previousPage + 1;\n  \n  let nextPageData = await fetchProductsInPage(page, query);\n  let previousProducts = lastSuccess.data ?? [];\n  \n  return mergeData(previousProducts, nextPageData);\n} \n\n")),(0,r.kt)("h3",{id:"isaborted"},(0,r.kt)("inlineCode",{parentName:"h3"},"isAborted")),(0,r.kt)("h4",{id:"type-and-description-3"},"Type and description"),(0,r.kt)("p",null,"This is a function that returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the current run has been aborted."),(0,r.kt)("p",null,"Let's say you have a promise chain in your producer, since there is no way to\ntell when a promise has been invalidated, the ",(0,r.kt)("inlineCode",{parentName:"p"},"isAborted")," comes into play."),(0,r.kt)("p",null,"PS: You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"signal.aborted")," too when it is fully supported by modern\nenvironments."),(0,r.kt)("h4",{id:"usage-examples-3"},"Usage examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function producer({ isAborted }) {\n  getAPromise()\n    .then(res => {\n      if (!isAborted()) {\n        // do work only if it wasn't aborted for some of your reasons\n        // for example, only display a toast if there was no cancellation\n      }\n    })\n    .catch(err => {\n      if (!isAborted()) {\n        // do work only if it wasn't aborted for some of your reasons\n        // for example, only display a toast if there was no cancellation\n      }\n    })\n}\n\n")),(0,r.kt)("h3",{id:"abort"},(0,r.kt)("inlineCode",{parentName:"h3"},"abort")),(0,r.kt)("h4",{id:"type-and-description-4"},"Type and description"),(0,r.kt)("p",null,"This is equivalent to ",(0,r.kt)("inlineCode",{parentName:"p"},"signal.abort()"),", in fact, it will call ",(0,r.kt)("inlineCode",{parentName:"p"},"signal.abort"),"\ninternally too.\nThis is a function that doesn't return anything."),(0,r.kt)("h4",{id:"usage-examples-4"},"Usage examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function getUserDetails({ abort, args: [userId] }) {\n  if (!userId) {\n    abort();\n  }\n}\n")),(0,r.kt)("p",null,"The previous example won't result in any state update and will just bailout the\nrun without affecting anything."),(0,r.kt)("h3",{id:"onabort"},(0,r.kt)("inlineCode",{parentName:"h3"},"onAbort")),(0,r.kt)("h4",{id:"type-and-description-5"},"Type and description"),(0,r.kt)("p",null,"This lets you register abort callbacks that will be executed when an abort event\noccurs."),(0,r.kt)("h4",{id:"usage-examples-5"},"Usage examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"async function producer({ onAbort }) {\n  let id;\n  onAbort(() => clearTimeout(id));\n  await new Promise(res => {\n    id = setTimeout(someWork, delay);\n  });\n}\n")),(0,r.kt)("h3",{id:"emit"},(0,r.kt)("inlineCode",{parentName:"h3"},"emit")),(0,r.kt)("h4",{id:"type-and-description-6"},"Type and description"),(0,r.kt)("p",null,"This has the same signature as ",(0,r.kt)("inlineCode",{parentName:"p"},"setState"),", but will have no effect before\nthe producer returns or after the abort occurs."),(0,r.kt)("p",null,"Think of it like something that keeps the producer alive after it returns."),(0,r.kt)("p",null,"It is an optimization that will allow you to support producers with intervals\nor that subscribes to external message sources, such as websockets or server\nside events."),(0,r.kt)("h4",{id:"usage-examples-6"},"Usage examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function intervalProducer({ onAbort, emit, args: [initialValue] }) {\n  let id = setInterval(() => {\n    emit(prev => prev.data + 1)\n  });\n  onAbort(() => clearInterval(id));\n  return initialValue;\n}\nfunction messagesProducer({ onAbort, emit, args: [initialValue] }) {\n  let client = connectToWs();\n  client.on("close", () => {\n    emit(null, "initial");\n  });\n  client.on("error", (err) => {\n    emit(err, "error");\n  });\n  client.on("message", (msg) => {\n    emit(prev => [...prev.data, msg]; \n  });\n  onAbort(() => client.disconnect());\n  return [];\n}\n')),(0,r.kt)("h3",{id:"getstate"},(0,r.kt)("inlineCode",{parentName:"h3"},"getState")),(0,r.kt)("h4",{id:"type-and-description-7"},"Type and description"),(0,r.kt)("p",null,"Returns the current state. It is mostly handy in combination with ",(0,r.kt)("inlineCode",{parentName:"p"},"emit"),"."))}c.isMDXComponent=!0}}]);