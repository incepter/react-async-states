"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[427],{8804:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return c}});var a=n(7896),r=n(1461),i=(n(2784),n(876)),l=["components"],o={sidebar_position:2,sidebar_label:"AsyncStateProvider"},s="AsyncStateProvider",d={unversionedId:"api/provider",id:"api/provider",isDocsHomePage:!1,title:"AsyncStateProvider",description:"To share the state returned from your producer function, you need a Provider to hold it.",source:"@site/docs/api/provider.md",sourceDirName:"api",slug:"/api/provider",permalink:"/react-async-states/docs/api/provider",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"AsyncStateProvider"},sidebar:"tutorialSidebar",previous:{title:"The producer function",permalink:"/react-async-states/docs/api/producer-function"},next:{title:"useAsyncState",permalink:"/react-async-states/docs/api/use-async-state"}},p=[],u={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"asyncstateprovider"},(0,i.kt)("inlineCode",{parentName:"h1"},"AsyncStateProvider")),(0,i.kt)("p",null,"To share the state returned from your producer function, you need a Provider to hold it."),(0,i.kt)("p",null,"The main purpose of the provider is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To hold the async states and allows subscription and selection"),(0,i.kt)("li",{parentName:"ul"},"To hold a universal payload that's given to all registered async states")),(0,i.kt)("p",null,"It accepts the following props:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Prop"),(0,i.kt)("th",{parentName:"tr",align:null},"PropType"),(0,i.kt)("th",{parentName:"tr",align:null},"Default value"),(0,i.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"payload")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Map<any, any>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{}")),(0,i.kt)("td",{parentName:"tr",align:null},"Payload at provider level, will be accessible to all hoisted async states")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"initialAsyncStates")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"AsyncStateDefinition[] or Map<string, AsyncStateDefinition>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[]")),(0,i.kt)("td",{parentName:"tr",align:null},"The initial Map or array of definitions of async states")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"children")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ReactElement")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:null},"The React tree inside this provider")))),(0,i.kt)("p",null,"To define an async state for the provider, you need the following:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"key")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:null},"The unique identifier or the name of the async state")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"producer")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"function or undefined")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:null},"The producer function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"initialValue")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"null")),(0,i.kt)("td",{parentName:"tr",align:null},"The state value when the status is ",(0,i.kt)("inlineCode",{parentName:"td"},"initial"))))),(0,i.kt)("p",null,"The initialAsyncStates, like stated, is an array of objects or a map; let's create some:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// pass this to provider\nlet demoAsyncStates = {\n  users: {\n    key: "users",\n    initialValue: [],\n    producer: async function getUsers(argv) {\n      return await fetchUsers(argv.payload.queryString);\n    },\n  },\n  currentUser: {\n    key: "currentUser",\n    // generators are the recommended way to go!\n    // because they allow to abort between yields! unlike promises and async-await!\n    producer: getCurrentUserGenerator,\n  },\n  // with undefined producer, you will be calling `replaceState` to change the state\n  somethingOpen: {\n    key: "somethingOpen",\n    initialValue: false,\n  },\n  localTodos: {\n    key: "something",\n    initialValue: {},\n    producer: function todosReducerPromise(argv) {\n      // myTodosReducer is a regular reducer(state, action) that returns the new state value, my guess is that you\'ve wrote many\n      return myTodosReducer(argv.lastSuccess, ...argv.args);\n    }\n  },\n}\nconst initialAsyncState = Object.values(demoAsyncStates); // or pass this to provider\n')),(0,i.kt)("p",null,"PS: You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncStateBuilder")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"createAsyncState")," to create these objects this way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import {AsyncStateBuilder, createAsyncState} from "react-async-states";\nlet usersAS = AsyncStateBuilder()\n    .key("users")\n    .initialValue([])\n    .producer(fetchUsersPromise)\n    .build();\n// or this way\nlet usersAs = createAsyncState(/*key*/"users", /*producer*/fetchUsersPromise, /*initialValue*/ []);\n')))}c.isMDXComponent=!0}}]);